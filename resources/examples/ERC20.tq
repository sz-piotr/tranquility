event Transfer {
  from: Address
  to: Address
  value: Uint
}

storage Token {
  balances: Map<Address, Uint>
  totalSupply: Uint

  use balances.get as balanceOf
  use totalSupply

  mint (address: Address, amount: Uint) {
    check(address != zero)
    check(amount != 0)

    balances[address] += amount
    totalSupply += amount

    emit Transfer(zero, address, amount)
  }

  transfer (from: Address, to: Address, amount: Uint) {
    check(from != zero)
    check(to != zero)
    check(amount != 0)

    balances[from] -= amount -> 'Insufficient funds'
    balances[to] += amount

    emit Transfer(from, to, amount)
  }

  burn (address: Address, amount: Uint) {
    check(address != zero)
    check(amount != 0)

    balances[address] -= amount -> 'Insufficient funds'
    totalSupply -= amount

    emit Transfer(address, zero, amount)
  }
}

event Approval {
  owner: Address
  spender: Address
  value: Uint
}

storage TokenWithAllowance {
  token: Token
  allowances: Map<Address, Map<Address, Uint>>

  use token.*

  allowance (owner: Address, spender: Address) {
    return allowances[owner][spender]
  }

  approve (owner: Address, spender: Address, value: Uint) {
    check(from != zero)
    check(spender != zero)

    allowances[owner][spender] = value

    emit Approval(owner, spender, value)
  }

  transferFrom (owner: Address, spender: Address, to: Address, value: Uint) {
    let newAllowance = allowance(owner, spender) - value
      -> 'Insufficient allowance'

    approve(owner, spender, newAllowance)
    token.transfer(owner, to, value)
  }

  burnFrom (owner: Address, spender: Address, value: Uint) {
    let newAllowance = allowance(owner, spender) - value
      -> 'Insufficient allowance'

    approve(owner, spender, newAllowance)
    token.burn(owner, value)
  }
}

contract ExampleCoin {
  token: TokenWithAllowance

  use token.balanceOf
  use token.totalSupply
  use token.allowance

  name = 'ExampleCoin'
  symbol = 'EXC'
  decimals = 18

  transfer (msg: Message, to: Address, amount: Uint) {
    token.transfer(msg.sender, to, amount)
    return true
  }

  approve (msg: Message, spender: Address, amount: Uint) {
    token.approve(msg.sender, spender, amount)
    return true
  }

  transferFrom (msg: Message, owner: Address, to: Address, amount: Uint) {
    token.transferFrom(owner, msg.sender, to, amount)
    return true
  }
}
