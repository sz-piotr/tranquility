program ::= statement program*

statement ::=
  event_declaration |
  function_declaration |
  storage_declaration |
  contract_declaration |
  variable_declaration |
  variable_assignment |
  if_statement |
  for_loop |
  while_loop |
  return_statement |
  expression

event_declaration ::= 'event' IDENTIFIER '{' field* '}'

function_declaration ::= 'function' method

storage_declaration ::= 'storage' IDENTIFIER storage_params? '{' object_body '}'
storage_params ::= '(' IDENTIFIER (',' IDENTIFIER)* ')'

contract_declaration ::= 'contract' IDENTIFIER '{' object_body '}'

object_body ::= (field | use | method)*

field ::= IDENTIFIER ':' type ('=' expression)?

use ::= 'use' IDENTIFIER '.' (IDENTIFIER | '*')

method ::= IDENTIFIER '(' method_params? ')' '{' statement* '}'
method_params ::= method_param (',' method_param)*
method_param ::= IDENTIFIER (':' type)?

type ::= IDENTIFIER type_params?
type_params ::= '(' type (',' type)* ')'

variable_declaration ::= 'let' IDENTIFIER (':' type)? '=' expression

variable_assignment ::=
  IDENTIFIER
  ('[' expression ']')?
  ('=' | '-=' | '+=' | '*=' | '/=')
  expression

if_statement ::=
  'if' expression '{' statement* '}'
  else_if_statement*
  else_statement?

else_if_statement ::=
  'else' 'if' expression '{' statement* '}'

else_statement ::=
  'else' '{' statement* '}'

for_loop ::=
  'for' IDENTIFIER (',' IDENTIFIER)? 'in' expression '{' statement* '}'

while_loop ::=
  'while' expression '{' statement* '}'

return_statement ::= 'return' expression

expression ::= ???
