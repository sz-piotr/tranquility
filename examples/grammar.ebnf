program ::= declaration program*

declaration ::= event | function | storage | contract


event ::= 'event' IDENTIFIER '{' field* '}'


function ::= 'function' method


storage ::= 'storage' IDENTIFIER storage_params? '{' object_body '}'

storage_params ::= '(' IDENTIFIER (',' IDENTIFIER)* ')'


contract ::= 'contract' IDENTIFIER '{' object_body '}'


object_body ::= (field | use | method)*


field ::= IDENTIFIER ':' type ('=' expression)?


use ::= 'use' IDENTIFIER '.' (IDENTIFIER | '*')


method ::= IDENTIFIER '(' method_params? ')' '{' statement* '}'

method_params ::= method_param (',' method_param)*

method_param ::= IDENTIFIER (':' type)?


type ::= IDENTIFIER type_params?

type_params ::= '(' type (',' type)* ')'


statement ::=
  variable_declaration |
  variable_assignment |
  if_statement |
  for_loop |
  while_loop |
  return_statement |
  expression |


variable_declaration ::= 'let' IDENTIFIER (':' type)? '=' expression

variable_assignment ::=
  IDENTIFIER
  ('[' expression ']')?
  ('=' | '-=' | '+=' | '*=' | '/=')
  expression

if_statement ::=
  'if' expression '{' statement* '}'
  else_if_statement*
  else_statement?

else_if_statement ::=
  'else' 'if' expression '{' statement* '}'

else_statement ::=
  'else' '{' statement* '}'

for_loop ::=
  'for' IDENTIFIER (',' IDENTIFIER)? 'in' expression '{' statement* '}'

while_loop ::=
  'while' expression '{' statement* '}'

return_statement ::= 'return' expression


expression ::= ???
